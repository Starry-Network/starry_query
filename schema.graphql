type StarterEntity @entity {
  id: ID! #id is a required field
  field1: Int!

  field2: String #filed2 is an optional field
  field3: BigInt

  field4: Date

  field5: Boolean
}

type Collection @entity {
  id: ID! #
  owner: String
  url: String
  isFungible: Boolean
  totalSupply: BigInt
  isSub: Boolean
  splitedFrom: Nft
}

type AddressCollectionBalance @entity {
  id: ID! #collection_id + address
  balance: BigInt
}

type Nft @entity {
  id: ID!
  endIdx: BigInt
  owner: String
  uri: String
  locked: Boolean
  isSub: Boolean
  splitedFrom: String
}

type Order @entity {
  id: ID!
  nft: Nft!
  seller: String
  amount: BigInt
  price: BigInt
}

type Dao @entity {
  id: ID!
  summoner: String
  escrowId: String
  periodDuration: Int
  votingPeriod: Int
  gracePeriod: Int
  metadata: String
  totalShares: BigInt
  summoningTime: BigInt
  dilutionBound: Int
  proposalDeposit: BigInt
  processingReward: BigInt
  members: [Member] @derivedFrom(field: "dao")
}

type Proposal @entity {
  id: ID!
  index: BigInt
  applicant: String
  proposer: String
  sponsor: String
  sharesRequested: BigInt
  tributeOffered: BigInt
  # tributeNft: nft
  tributeNftId: String
  startingPeriod: BigInt
  yesVotes: BigInt
  noVotes: BigInt
  details: String
  action: String
  sponsored: Boolean
  processed: Boolean
  didPass: Boolean
  cancelled: Boolean
  executed: Boolean
}

type Vote @entity {
    id: ID! # (dao_id)-(proposal_id)-(voter_account)
    yes: Boolean
    shares: BigInt
    date: Date
}

type Member @entity {
  id: ID! # (dao_id)-(member_account)
  shares: BigInt
  dao: Dao!
}